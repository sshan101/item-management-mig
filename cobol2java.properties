####################################################################################################
#
# Generic properties
#
####################################################################################################
[general]

    # Specifies what will happen to this properties file upon running the refactoring process. By
    # default the file is re-written.
    #
    # Default value is 'rewrite-with-descriptions'.
    #
    property-policy = rewrite-with-descriptions
    
    # Defines how the cobol2java transformation should react when an error occurs.
    # Format: <Categories>:<Action>, <Categories>:<Action>, ...
    # <Categories>:
    #  A list of <Category> joined by '+' or '*' for all categories. '*' is only allowed for the
    #  leftmost assignment but can be followed by other, more specific assignments.
    # <Category>:
    #  - 'general': A general error occurred., default action is 'compile-error'
    #  - 'copycode': A problem occurred while handling copy codes, default action is 'compile-error'
    #  - 'processor': An error occurred during preparation or execution of a processor, default
    #     action is 'abort'
    #  - 'copybook resolver': An error occurred during preparation or execution of a custom
    #     copybook resolver, default action is 'abort'
    #  - 'adaprep': An error occurred while handling ADABAS/ADAPREP code., default action is
    #     'compile-error'
    #  - 'bms': A problem occurred while handling BMS parsing., default action is 'compile-error'
    #  - 'annotations': A problem occurred while handling inline comment annotations., default
    #     action is 'compile-error'
    #  - 'next-sentence': An error occurred while handling the NEXT SENTENCE statement., default
    #     action is 'compile-error'
    #  - 'no-runtime-support': An error occurred while handling a statement with no runtime
    #     support., default action is 'log'
    # <Action>:
    #  - 'ignore': Ignores the problem; even doesn't write a log message
    #  - 'log': Writes the error to the log (depending on what is configured in log4j.xml)
    #  - 'fixme': Creates fixme comments if possible and writes the error to the log
    #  - 'compile-error': Creates compile errors if possible and writes the error to the log
    #  - 'abort': Aborts with an error message, creates a compile error if possible and writes
    #     the error to the log
    # Examples
    #  - 'processor:log, general+copycode:ignore'
    #  - '*:compile-error, processor+copycode+next-sentence+no-runtime-support:abort'
    #  - 'adaprep:fixme, bms:ignore'
    # The empty value '' uses the default action for each category and is equivalent to
    # '*:compile-error, processor+copybook resolver:abort, no-runtime-support:log'
    #
    # Default value is ''.
    #
    error-policy = next-sentence:fixme
    
    # If 'false', the eclipse workspace job is executed as exclusive job with a root scheduling
    # rule. This means all other eclipse 
    # jobs (save a file, ...) are queued and executed after the refactoring jobs ends. If set to
    # 'true', the dynamic job temporarily extends 
    # the rights of the refactoring job to root level if required (build project, ...). Most of the
    # time, the scheduling rule is reduced to the 
    # refactored project itself.
    # Dynamic workspace job should not be enabled for back-end or eclipse headless installations.
    #
    # Default value is 'false'.
    #
    dynamic-workspace-job = false
    
####################################################################################################
#
# ADABAS/ADAPREP properties for cobol2java
#
####################################################################################################
[adabas-adaprep]

    # The name of the project in which the DDMs and FDTs are located.
    natural-ddm-project = 
    
    # The project local path in which the Natural DDMs are located.
    natural-ddm-library = 
    
    # The project local path in which the ADABAS FDTs are located.
    #
    # Default value is 'res/FDT'.
    #
    natural-fdt-folder = res/FDT
    
    # The name of the package in which existing, refactored DDMs are located.
    java-ddm-package = 
    
####################################################################################################
#
# General properties for cobol2java
#
####################################################################################################
[cobol2java]

    # Adds @SuppressWarnings("all") to every transformed type.
    #
    # Default value is 'false'.
    #
    suppress-warnings = false
    
    # The top-level package to which refactored sources are written.
    #
    # Default value is ''.
    #
    target-package-name = innowake.components
    
    # Refactoring produces pure Java sources when this property is 'true' and annotated Java sources
    # when this property is 'false'.
    #
    # Default value is 'true'.
    #
    transform-to-pure-java = false
    
    # Transform COPY statements wrapped in a REPLACE BY ... REPLACE OFF statement to COPY REPLACING
    # statements. This only takes effect if Jcopies are enabled. Use this feature with caution as
    # not all COPY statements can be transformed to COPY REPLACING statements.
    #
    # Default value is 'false'.
    #
    transform-replace-copy-to-replacing = false
    
    # Refactoring creates separate SELECT statements instead of merging them with FD entries if this
    # property is set to 'true'.
    # This feature only takes effect if the transformation to annotated Java sources is also enabled.
    #
    # Default value is 'false'.
    #
    feature-standalone-file-select = false
    
    # Preserve the original name of the variable when transforming to annotated code (i.e.
    # 'transform-to-pure-java' is set to 'false').
    # Example: 01 #FIELD PIC X. is transformed to:
    # without this option: @L1 PICX xFIELD = PICX(1);
    # with this option:    @L1 PICX xFIELD = PICX(1, "#FIELD");
    #
    # Default value is 'false'.
    #
    preserve-original-field-names = true
    
    # The sequence of control characters used to separate lines in the refactored sources. Valid
    # values are 'platform', 'windows', or 'unix'.
    #
    # Default value is 'unix'.
    #
    line-separator = unix
    
    # Set to 'true' to enable use of the Report Writer extension.
    #
    # Default value is 'false'.
    #
    report-writer = false
    
    # Sets the initial value for index data items.
    #
    # Default value is '0'.
    #
    index-data-item-init-value = 0
    
    # Set to 'true' to enable the transformation of copybooks to jcopy files.
    #
    # Default value is 'false'.
    #
    activate-jcopy = true
    
    # The java source folder to which refactored COBOL sources are written.
    #
    # Default value is 'src-cobol-java'.
    #
    target-folder-java = /item-management-mig/resources/source/java
    
    # Sets the fully qualified class name of a pre and post processor.
    # A method for pre processing legacy code will be applied before refactoring
    # and a method for post processing Java code will be applied as the last step before saving the
    # file to disk.
    # A processor must implement the interface 'innowake.mee.source.base.expert.MigrationProcessor'
    # overriding the methods 'preProcess' and 'postProcess'.
    processor = 
    
    # Number of objects that can be transformed before a delta build is triggered. '0' means no
    # build will be triggered (not recommended).
    #
    # Default value is '1000'.
    #
    build-threshold = 1000
    
    # Optional comma separated list of additional imports to be added to the header of each
    # generated Java file.
    additional-imports = 
    
    # Optional comma separated list of launch configuration files to be executed before the
    # cobol2java transformation.Use slash as path separator. A workspace relative path starts with a
    # slash, a project relative path without slash.
    launch-before-transformation = 
    
    # Optional comma separated list of launch configuration files to be executed after the
    # cobol2java transformation.Use slash as path separator. A workspace relative path starts with a
    # slash, a project relative path without slash.
    launch-after-transformation = 
    
    # Process COBOL comment annotations like <$ MEE ... $>
    #
    # Default value is 'false'.
    #
    process-annotations = false
    
    # Sets the fully qualified class name of a custom copybook resolver.
    # It provides a method for defining custom resolution of copybooks and setting a custom name for
    # JCopy files generated during refactoring.
    # A copybook resolver must implement the interface 'innowake.mee.source.cobol2java.CopybookResolver'.
    #
    # Default value is 'innowake.mee.source.cobol2java.DefaultCopybookResolver'.
    #
    copybook-resolver = innowake.mee.source.cobol2java.DefaultCopybookResolver
    
    # Determines if the L88 fields should be prefixed with it's target field name.
    # This only has an effect when 'transform-to-pure-java' is set to 'false'.
    #
    # Default value is 'false'.
    #
    prefix-level-88-with-target-name = false
    
    # Qualify cobol variables the same as they are in the original cobol file.
    #
    # Default value is 'false'.
    #
    native-field-qualification = false
    
    # Sets the fully qualified class name of a name mapper.
    # It provides a method for defining custom name mapping from COBOL to Java.
    # A name mapper must implement the interface 'innowake.mee.source.cobol2java.naming.NameMapper'
    #
    # Default value is 'innowake.mee.source.cobol2java.naming.DefaultNameMapper'.
    #
    name-mapper = innowake.mee.source.cobol2java.naming.DefaultNameMapper
    
####################################################################################################
#
# Properties for BMS map transformation
#
####################################################################################################
[bms]

    # Generate a COBOL copybook as symbolic map for each BMS map file, overwriting any existing copybooks.
    #
    # Default value is 'true'.
    #
    generate-copybooks = true
    
    # Always add TIOAPFX 12-byte FILLER to generated copybooks, even when the map file does not
    # include "TIOAPFX=YES".
    #
    # Default value is 'false'.
    #
    tioapfx-enabled-by-default = false
    
    # Generate symbolic maps that are aligned to halfword boundaries, as if they were compiled with
    # the "SYSPARM=ADSECT" CICS assembler option.
    #
    # Default value is 'false'.
    #
    align-to-halfword = false
    
